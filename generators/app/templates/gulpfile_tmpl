'use strict'

import gulp from 'gulp'
import browserSync from 'browser-sync'                //  浏览器自动刷新
import sass from 'gulp-sass'                          //  sass编译
import sourcemaps from 'gulp-sourcemaps'              //  代码地图
import uglify from 'gulp-uglify'                      //  压缩JS
import saveLicense from 'uglify-save-license'         //  处理uglify 保存协议的问题
import stripDebug from 'gulp-strip-debug'             //  清理JS中的debug方法
import clean from 'gulp-clean-css'                    //  压缩css
import autop from 'gulp-autoprefixer'                 //  css版本前缀
import rename from 'gulp-rename'                      //  修改文件名
import gutil from 'gulp-util'                         //  输出有色控制台信息
import notify from 'gulp-notify'                      //  命令行提示信息

// browserify
import browserify from 'browserify'
import source from 'vinyl-source-stream'              //  browserify的输出不能直接用着gulp的输入，vinly-source-stream 主要是做一个转化
import buffer from 'vinyl-buffer'                     //  用于将vinyl流转化为buffered vinyl文件
import babelify from 'babelify'                       //  让browserify transform 支持babel转义

const PATH = {
  useMin: false, //  是否使用[name].min.js 后缀
  basicDir: 'app',
  css: {
    scssSrc: ['app/scss/**/*.scss'],
    scssDest: 'app/css',
    cssSrc: 'app/css/**/*.css',
    cssDest: 'app/css'
  },
  js: {
    jsName: '<%= projectName %>.js',
    jsSrc: 'app/js/**/*.js',
    jsEntrance: ['app/js/index.js'],
    jsDest: 'app/build'
  }
};

//  压缩css代码
gulp.task('cssClean', ['sass'], () => {
  gulp.src(PATH.css.cssSrc)
  .pipe(clean())
  .pipe(autop({browsers: ['last 10 versions']}))
  .pipe(rename({
    suffix: PATH.useMin ? '.min' : ''  //  [name].min.css
  }))
  .pipe(gulp.dest(PATH.css.cssDest))
})

gulp.task('sass', () => {
  return gulp.src(PATH.css.scssSrc)
  .pipe(sourcemaps.init())
  .pipe(sass.sync().on('error', sass.logError))
  .pipe(sourcemaps.write())
  .pipe(gulp.dest(PATH.css.scssDest))
  .pipe(browserSync.stream());
})

//  js ES6 打包编译
gulp.task('browserify', () => {
  browserify({
    entries: PATH.js.jsEntrance,
    debug: true,
  })
  .transform("babelify", {presets: ["es2015"]}).on('error', function (error) {
    // If you want details of the error in the console
    console.error(error.toString())
    this.emit('end')
  })
  .bundle()
  .pipe(source(PATH.js.jsName))
  .pipe(buffer())
  .pipe(sourcemaps.init({loadMaps: true}))
  .pipe(sourcemaps.write('.'))
  .pipe(gulp.dest(PATH.js.jsDest))
  //.pipe(notify({message: 'browserify 转换成功'}))
})

//  開始
gulp.task('start', ['sass', 'browserify'], () => {
  browserSync.init({
    server: PATH.basicDir
  });
  
  gulp.watch(PATH.css.scssSrc, ['sass']);
  gulp.watch(PATH.js.jsSrc, ['browserify']);
  gulp.watch(`${PATH.js.jsDest}/*.js`).on('change', browserSync.reload);
  gulp.watch(`${PATH.basicDir}/**/*.html`).on('change', browserSync.reload);
})

//  压缩JS
gulp.task('unglifyJs', function () {
  gulp.src(`${PATH.js.jsDest}/**/*.js`)
  .pipe(stripDebug())
  .pipe(uglify({
    output: {
      comments: saveLicense
    }
  }))
  .on('error', function (err) {
    gutil.log(gutil.colors.red('[Error]'), err.toString());
  })
  .pipe(rename({
    suffix: PATH.useMin ? '.min' : ''
  }))
  .pipe(gulp.dest(PATH.js.jsDest))
})

//  发布
gulp.task('build', ['cssClean', 'unglifyJs'])